@startuml

namespace Common {
    class User extends BaseModel {
        +id : int
        +name : string
        @Validate(String::class, notNull = true)
        +email : string
    }

    abstract class BaseModel<T> implements Orm.IBaseModel {
        ---
        +validate() : Set<ConstraintViolation>
        +populateAttributes(attributes : Map<String, ColumnValue>)
        +getAttributes() : Map<String, ColumnValue>
    }
}

namespace Orm {

    interface IBaseModel<T> {
        ---
        +validate() : Set<ConstraintViolation>
        +populateAttributes(attributes : Map<String, ColumnValue>)
        +getAttributes() : Map<String, ColumnValue>
    }


    abstract class BaseRecord<T> implements Pagination {
        #state : BaseModel<T>
        -dbState : BaseRecord
        -exists : boolean
        -deleteFunctionality : DeleteFunctionality
        ---
        #Bootstrap() : void
        #getDeleteFunctionality() : DeleteFunctionality
        -isDirty() : boolean
        -- State manipulators --
        +setAttribute(name : String, value : V | ColumnValue)
        +getAttribute(name : String) : ColumnValue
        -- Database operations --
        +create(attributes : Map | BaseModel<T>) : BaseRecord<T>
        +save() : boolean
        +update(attributes : Map | BaseModel<T>) : boolean
        +all() : List<User>
        +fill(attributes : Map | BaseModel<T>) : User
        +delete() : boolean
        -- Relations --
        +hasOne(class : Class<Model>, foreignKey : String, localKey : String)
        +belongsTo(class : class<Model>, foreignKey : String, localKey : String)
        +hasMany(class : class<Model>, foreignKey : String, localKey : String)
        +hasManyThrough(class : class<Model>, foreignKey : String, localKey : String)
    }



    interface Pagination {
        ---
        +paginate()
    }

    interface DeleteFunctionality {
        +delete() : boolean
    }

    BaseRecord "1" o-- "1" DeleteFunctionality

    class DefaultDeleteFunctionality implements DeleteFunctionality {
        +delete() : boolean
    }

    class SoftDelete implements DeleteFunctionality {
        #deleted_at : string
        ---
        +restore() : BaseRecord
        +delete() : boolean
        +delete(force : boolean) : boolean
    }

    interface ISoftDelete {
        #getDeleteFunctionality() : DeleteFunctionality
        +restore() : BaseRecord - Default
        +forceDelete(force : boolean) : boolean - Default
    }

    class Query {
        -table : string
        -selects : Set<string>
        -wheres : LinkedList<ConditionalStatement>
        -joins : LinkedList<JoinStatement>
        -groupBy : LinkedHashSet<string>
        -orderBy : LinkedHashSet<string>
        -having : LinkedList<ConditionalStatement>
        ---
        +select(columns : string...)
        +join(table : Class<? extends BaseRecord>, foreignKey : string, localKey : string, type : JoinType)
        +join(query : Query, foreignKey : string, localKey : string, type : JoinType)
        +where(key : string, operator : SqlOperator, value : T, useAnd : boolean = true)
        +having(key : string, operator : SqlOperator, value : T, useAnd : boolean = true)
        +groupBy(column : string...)
        +orderBy(column : string...)
        +get()
        +first()
        +delete() : boolean
    }

    Query "1" o-- "*" ConditionalStatement
    Query "1" o-- "*" JoinStatement

    class ConditionalStatement<T> {
        key : string
        operator : SqlOperator
        value : T
        useAnd : boolean = true
        ---
        getStatement() : string
    }

    ConditionalStatement "1" o-- "1" SqlOperator

    class JoinStatement {
        table : Class<BaseRecord>
        query : Query
        foreignKey : string
        localKey : string
        type : JoinType
    }

    enum JoinType {
        LeftJoin
        OuterJoin
    }

    JoinStatement "1" o-- "1" JoinType
    JoinStatement "1" o-- "0..1" Query
    JoinStatement "1" o-- "0..1" BaseRecord

    enum SqlOperator {

    }


}

namespace Server {
    class UserModel extends Orm.BaseRecord implements Orm.ISoftDelete {
        #state : Common.User
        -deleteFunctionality = new SoftDelete()
    }

    UserModel "1" o--- "1" Common.User
}

@enduml